name: declare

services:
    dashboards:
        build:
            context: ../
            dockerfile: .declare/Dockerfile-dashboards
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5173/"]
            interval: 1s
            timeout: 10s
            retries: 5
        ports:
            - "5173:5173"
        volumes:
            # Mount the dashboards source directory to the container for watching
            - ./../dashboards:/usr/src/app/src/user_dashboards
            # Mount the model definitions directory to the container for watching as well
            - ./../models:/usr/src/app/src/models
        restart: unless-stopped
    hot-model-reloader:
        build:
            context: ../
            dockerfile: .declare/Dockerfile-hot-model-reloader
        depends_on:
            clickhouse:
                condition: service_healthy
        volumes:
            # Mount the model definitions directory to the container for watching
            - ./../models:/usr/src/app/models
        restart: unless-stopped
    serve-models-api:
        build:
            context: ../
            dockerfile: .declare/Dockerfile-serve-models-api
        ports:
            - "8001:8001"
        depends_on:
            clickhouse:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8001/"]
            interval: 1s
            timeout: 10s
            retries: 5
        restart: unless-stopped
    sql-linter:
        image: sqlfluff/sqlfluff:latest
        user: root # Run as root to gain necessary permissions
        volumes:
            - ./../models:/models
        entrypoint: >
            /bin/sh -c "
                # Run sqlfluff fix silently on all files initially
                sqlfluff fix /models --dialect clickhouse --show-lint-violations && \
                echo \"\" && \

                # Update and install inotify-tools quietly
                apt-get update -qq && \
                apt-get install -y --no-install-recommends inotify-tools > /dev/null 2>&1 && \

                # Clean up to reduce image size
                chmod -R 755 /var/lib/apt/lists && \
                rm -rf /var/lib/apt/lists/* && \

                # Start the inotifywait loop silently
                while true; do \
                    FILE=$$(inotifywait -e modify --format \"%w%f\" -r /models) > /dev/null 2>&1 && \
                    echo \"\" && \
                    sqlfluff fix \"$$FILE\" --dialect clickhouse --show-lint-violations; \
                    echo \"\" \
                done
            "
        restart: always
    clickhouse:
        image: clickhouse/clickhouse-server
        user: "101:101"
        hostname: clickhouse
        ports:
            # The HTTP api
            - "127.0.0.1:8123:8123"
            # The native protocol
            - "127.0.0.1:9000:9000"
        healthcheck:
            test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
            interval: 100ms
            timeout: 250ms
            retries: 20
        restart: on-failure
        security_opt:
            - seccomp:unconfined
    hatchet-postgres:
        image: postgres:15.6
        command: postgres -c 'max_connections=200'
        restart: always
        hostname: "postgres"
        environment:
            - POSTGRES_USER=hatchet
            - POSTGRES_PASSWORD=hatchet
            - POSTGRES_DB=hatchet
        ports:
            - "5435:5432"
        volumes:
            - hatchet_postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready", "-d", "hatchet"]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 10s
    hatchet-rabbitmq:
        image: "rabbitmq:3-management"
        hostname: "rabbitmq"
        ports:
            - "5673:5672" # RabbitMQ
            - "15673:15672" # Management UI
        environment:
            RABBITMQ_DEFAULT_USER: "user"
            RABBITMQ_DEFAULT_PASS: "password"
        volumes:
            - "hatchet_rabbitmq_data:/var/lib/rabbitmq"
            - "hatchet_rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf" # Configuration file mount
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 10s
            timeout: 10s
            retries: 5
    hatchet-migrations:
        image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest
        environment:
            DATABASE_URL: "postgres://hatchet:hatchet@hatchet-postgres:5432/hatchet"
        depends_on:
            hatchet-postgres:
                condition: service_healthy
    hatchet-setup-config:
        image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
        command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
        environment:
            DATABASE_URL: "postgres://hatchet:hatchet@postgres:hatchet-5432/hatchet"
            DATABASE_POSTGRES_PORT: "5432"
            DATABASE_POSTGRES_HOST: "postgres"
            SERVER_TASKQUEUE_RABBITMQ_URL: amqp://user:password@rabbitmq:5672/
            SERVER_AUTH_COOKIE_DOMAIN: localhost:8080
            SERVER_AUTH_COOKIE_INSECURE: "t"
            SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
            SERVER_GRPC_INSECURE: "t"
            SERVER_GRPC_BROADCAST_ADDRESS: localhost:7077
        volumes:
            - hatchet_certs:/hatchet/certs
            - hatchet_config:/hatchet/config
        depends_on:
            hatchet-migrations:
                condition: service_completed_successfully
            hatchet-rabbitmq:
                condition: service_healthy
            hatchet-postgres:
                condition: service_healthy
    hatchet-engine:
        image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest
        command: /hatchet/hatchet-engine --config /hatchet/config
        restart: on-failure
        depends_on:
            hatchet-setup-config:
                condition: service_completed_successfully
            hatchet-migrations:
                condition: service_completed_successfully
        ports:
            - "7077:7070"
        environment:
            DATABASE_URL: "postgres://hatchet:hatchet@hatchet-postgres:5432/hatchet"
            SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
            SERVER_GRPC_INSECURE: "t"
        volumes:
            - hatchet_certs:/hatchet/certs
            - hatchet_config:/hatchet/config
    hatchet-api:
        image: ghcr.io/hatchet-dev/hatchet/hatchet-api:latest
        command: /hatchet/hatchet-api --config /hatchet/config
        restart: on-failure
        depends_on:
            hatchet-setup-config:
                condition: service_completed_successfully
            hatchet-migrations:
                condition: service_completed_successfully
        environment:
            DATABASE_URL: "postgres://hatchet:hatchet@hatchet-postgres:5432/hatchet"
        volumes:
            - hatchet_certs:/hatchet/certs
            - hatchet_config:/hatchet/config
    hatchet-frontend:
        image: ghcr.io/hatchet-dev/hatchet/hatchet-frontend:latest
    hatchet-caddy:
        image: caddy:2.7.6-alpine
        ports:
            - 8080:8080
        volumes:
            - ./Hatchet-Caddyfile:/etc/caddy/Caddyfile

volumes:
    hatchet_postgres_data:
    hatchet_rabbitmq_data:
    hatchet_rabbitmq.conf:
    hatchet_config:

    hatchet_certs:
